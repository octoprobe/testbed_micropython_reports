[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "octoprobe_testbed_micropython_reports"
dynamic = ["version"]
description = "Octoprobe HIL Testenvironment: HTTP Reports Server"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    { name = "Hans MÃ¤rki", email = "buhtig.hans.maerki@ergoinfo.ch" },
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "testbed_micropython@git+https://github.com/octoprobe/testbed_micropython@main",
    "fastapi~=0.115.5",
    "uvicorn~=0.32.0",
    "starlette~=0.41.2",
    "jinja2~=3.1.4",
    "python-multipart~=0.0.17",
    "markdown2[all]~=2.5.3",
    "ansi2html~=1.9.2",
]

[project.urls]
Homepage = "https://github.com/octoprobe/testbed_micropython"
Documentation = "https://github.com/octoprobe/testbed_micropython"
Repository = "https://github.com/octoprobe/testbed_micropython_reports"

[project.scripts]
# mptest = "testbed_micropython.mptest.cli:app"

[project.optional-dependencies]

all = []

dev = [
    # "-e .",
]

doc = []

[tool.pdm]
version = { source = "file", path = "app/__init__.py" }
distribution = false

[tool.pdm.build]
package-dir = "src"
includes = [
    "app/",
]
source-includes = [
    "LICENSE",
    "README.rst"
]

[tool.mypy]
# strict = true
# enable_incomplete_feature = ["NewGenericSyntax"]

[[tool.mypy.overrides]]
module = "markdown2.*"
ignore_missing_imports = true

[tool.pytest.ini_options]
pythonpath = "."
addopts = [
  # "-m", "not live",
  "--strict-config",
  "--strict-markers",
  "--ignore=docs",
]
markers = [
    "live: Test on real usb hubs",
]
testpaths = "tests"
xfail_strict = true
junit_family = "xunit2"
filterwarnings = [
    "error",
    # TODO: needed by asyncio in Python 3.9.7 https://bugs.python.org/issue45097, try to remove on 3.9.8
    'ignore:The loop argument is deprecated since Python 3\.8, and scheduled for removal in Python 3\.10:DeprecationWarning:asyncio',
    'ignore:starlette.middleware.wsgi is deprecated and will be removed in a future release\..*:DeprecationWarning:starlette',
    # TODO: remove after upgrading HTTPX to a version newer than 0.23.0
    # Including PR: https://github.com/encode/httpx/pull/2309
    "ignore:'cgi' is deprecated:DeprecationWarning",
    # For passlib
    "ignore:'crypt' is deprecated and slated for removal in Python 3.13:DeprecationWarning",
    # TODO remove pytest-cov
    'ignore::pytest.PytestDeprecationWarning:pytest_cov',
    # TODO: remove after upgrading SQLAlchemy to a version that includes the following changes
    # https://github.com/sqlalchemy/sqlalchemy/commit/59521abcc0676e936b31a523bd968fc157fef0c2
    'ignore:datetime\.datetime\.utcfromtimestamp\(\) is deprecated and scheduled for removal in a future version\..*:DeprecationWarning:sqlalchemy',
    # TODO: remove after upgrading python-jose to a version that explicitly supports Python 3.12
    # also, if it won't receive an update, consider replacing python-jose with some alternative
    # related issues:
    #   - https://github.com/mpdavis/python-jose/issues/332
    #   - https://github.com/mpdavis/python-jose/issues/334
    'ignore:datetime\.datetime\.utcnow\(\) is deprecated and scheduled for removal in a future version\..*:DeprecationWarning:jose',
]

[tool.coverage.run]
parallel = true
source = [
    "tests",
]
context = '${CONTEXT}'
omit = [
]

[tool.ruff]
target-version = "py313"
# All paths are relative to the project root, which is the directory containing the pyproject.toml.
src = ["src", "tests"]
exclude = []

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort
    "I001", # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    # "W191",  # indentation contains tabs
    "D",     # enable docstring checks
    "B027",  #  empty method in an abstract base class
]

[tool.ruff.lint.per-file-ignores]
"testbed_micropython/__init__.py" = ["F401", "I001"]

[tool.ruff.lint.isort]
# known-third-party = ["usbhubctl"]
# known-local-folder = ["usbhubctl"]
case-sensitive = true
combine-as-imports = true
order-by-type = false
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pylint."MESSAGES CONTROL"]
disable = '''
    broad-exception-caught,
    cyclic-import,
    fixme,
    import-outside-toplevel,
    line-too-long,
    logging-fstring-interpolation,
    missing-class-docstring,
    missing-function-docstring,
    missing-module-docstring,
    too-few-public-methods,
    too-many-arguments,
    too-many-branches,
    too-many-instance-attributes,
    too-many-locals,
    too-many-nested-blocks,
    too-many-positional-arguments,
    too-many-return-statements,
    too-many-statements,
    unnecessary-lambda,
    unreachable,
    unspecified-encoding,
    unused-argument,
    using-constant-test,
    wrong-import-order,
'''
# too-many-positional-arguments,

[tool.pylint]
max-line-length = 88
disable = [
    "R0801", # Similar lines in 2 files
    "E1136", # unsubscriptable-object
]
